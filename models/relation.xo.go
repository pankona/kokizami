// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Relation represents a row from 'relation'.
type Relation struct {
	ID       int `json:"id"`        // id
	KizamiID int `json:"kizami_id"` // kizami_id
	TagID    int `json:"tag_id"`    // tag_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Relation exists in the database.
func (r *Relation) Exists() bool {
	return r._exists
}

// Deleted provides information if the Relation has been deleted from the database.
func (r *Relation) Deleted() bool {
	return r._deleted
}

// Insert inserts the Relation to the database.
func (r *Relation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO relation (` +
		`kizami_id, tag_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.KizamiID, r.TagID)
	res, err := db.Exec(sqlstr, r.KizamiID, r.TagID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	r.ID = int(id)
	r._exists = true

	return nil
}

// Update updates the Relation in the database.
func (r *Relation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE relation SET ` +
		`kizami_id = ?, tag_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, r.KizamiID, r.TagID, r.ID)
	_, err = db.Exec(sqlstr, r.KizamiID, r.TagID, r.ID)
	return err
}

// Save saves the Relation to the database.
func (r *Relation) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Relation from the database.
func (r *Relation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM relation WHERE id = ?`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RelationByID retrieves a row from 'relation' as a Relation.
//
// Generated from index 'relation_id_pkey'.
func RelationByID(db XODB, id int) (*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, kizami_id, tag_id ` +
		`FROM relation ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	r := Relation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.KizamiID, &r.TagID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RelationByKizamiIDTagID retrieves a row from 'relation' as a Relation.
//
// Generated from index 'sqlite_autoindex_relation_1'.
func RelationByKizamiIDTagID(db XODB, kizamiID int, tagID int) (*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, kizami_id, tag_id ` +
		`FROM relation ` +
		`WHERE kizami_id = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, kizamiID, tagID)
	r := Relation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, kizamiID, tagID).Scan(&r.ID, &r.KizamiID, &r.TagID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
